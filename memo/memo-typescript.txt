---

TypeScript for Beginners
JavaScript & TypeScript Essential

---

🍫 TypeScript for Beginners

-- Theory

Types
Interfaces
Classes
Polymorphism
Generics
Call Signatures
JSDoc

---

🍫 JavaScript & TypeScript Essential

-- Theory

시작하며
Javascript 그리고 Typescript
Javascript Starter Kit_Hacker News Client
Typescript Start Kit_Hacker News 마이그레이션
실용 튜토리얼
참조 사전
부록

---

===

🍫 TypeScript for Beginners

# 1.1~1.5 이어지는 강의, Welcome, Who Should Take This Course, Software Requirements, Why not JavaScript

# 이어지는 강의
Go로 암호화폐 만들기
우버이츠 클론코딩
캐럿마켓 클론코딩

# 준비 / node.JS Install 

> node -v
: nodeJS Version 확인. v17.3.1 이상 설치해두기

Using Ubuntu 
: curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &&\
sudo apt-get install -y nodejs

# TypeScript와 JavaScript의 차이점

JavaScript는 Type Error, function Error, Runtime Error를 발생한다.

#2.0~2.4 How Typescript Works, Implicit Types vs Explicit Types / Types of TS part One, Two, Three

# TypeScript과 Python에서의 Tuple 차이점

Python에서의 Tuples
: ( ) 로 값을 지정. 불가변성 특징을 가진다. 호출할 때에는 List와 마찬가지로 튜플명[인덱스]로 호출

TypeScript에서의 Tuple
: 예시, const player: readonly [string, number, boolean] = ["string", 1, true];과 같이 작성한다.

tuple
: 셀 수 있는 수량의 순서가 있는 열거형을 나타낸다.

#3 Functions, #3.0~3.4 Call Signatures, Overloading, Polymorphism, Generics Recap, Conclusions

# void를 쓰는 경우
결과값을 반환하지 않는 경우에 쓰이고 void를 안 쓰는 경우에는 'const a = 함수명' 등으로 참조변수에 값을 반환해 담아둘 때 쓰인다.

# '=>' 와 ' : ' 의 차이점

예를 들어, Generic을 사용할 때

type Generic = <T>(a:T[]) => T
:generics는 다수의 타입지정을 하지 않아도 유추해서 타입을 맞춰주기 때문에 이와 같이 간단히 작성하여도 된다.

type Generic = {  <T>(a:T[]):T }
: 와 같이 작성하지 않고 위에 작성방법으로도 간단히 다룰 수 있다.

===

🍫 JavaScript & TypeScript Essential

#01 시작하며, #1.1 어떻게 배울 것인가?

# 프로그래밍 학습
도전에 실패하는 이유?
: 학습해야할 방대한 사전 지식

# 입문서 읽어보기
: 모던 자바스크립트, 모던 자바스크립트 Deep Dive, 자바스크립트 완벽 가이드( JavaScript: The Definitive Guide )

# 학습 전략
: 일단 만들어보며 우당탕 학습하기, 잘 정리된 순서대로 학습을 진행하기, 하이브리드! 두 가지 모두 시도

만약, 새로 만들 때 변형을 가미하며 개선하도록 한다.

--🥤 공부 타입 2가지. 순차적 학습법, 레시피형 학습법

순차적 학습법
: 기초부터 차근차근 배워가는 학습법

레시피형 학습법
: 원하는 요리 레시피를 보고 따라 하듯 상황별로 배우는 학습법. 10가지 정도의 주요 사용 사례로

--🥤 현재 현업에서 쓰이는 주요기술

React, Vui.js, Redux, Mobx

# 1.2~1.3 빠르게 배워야할 것, 나중에 배워야할 것, 반복해 배워야할 것 / 강의의 구조와 학습 환경

--🥤 변하지 않는 기술 / 높은 학습비용

: 네트워킹, 운영체제, 컴퓨터시스템, 논리학, 대수학, 언어론

--🥤 느리게 변하는 기술

: 프로그래밍 언어, 프로그래밍 패러다임, 자료구조, 알고리즘, 보안

--🥤 빠르게 변하는 기술 / 낮은 학습비용

: 프레임워크, 라이브러리, UI, UX, 디자인 패턴

--🥤 일관성, 유연성, 확장성, 독립성

: 역량 트레이닝 4가지

# 빠르게 변하는 기술 / 느리게 변하는 기술, 변하지 않는 기술의 학습 차이점

빠르게 변하는 기술은 쉽게 짧은 시간에 학습하는 것이 중요하다.

느리게 변하는 기술은 도중에 멈추지 않고 조금씩이라도 학습하는 것이 중요하다.

변하지 않는 기술은 복습이 상당히 잦은 학습이니 조금씩이라도 학습하자.

--🥤 VSCode 환경

: JavaScript Debugger(Debugger for chrome), NodeJs, Parcel, typescript 설치

Bundler

: Webpack, Parcel이 있다.

--🥤 Parcel, TypeScript 설치

Parcel 설치
: npm install -g parcel-bundler 혹은 npm install parcel-bundler

-g 보다는 프로젝트별로 나눠서 설치하자.

TypeScript 설치
: npm install typescript --save-dev

# 2 JavaScript 그리고 TypeScript / #2.1~2.3 JavaScript 변천사, 웹앱의 구성요소, 모던 JavaScript와 개발환경

# JavaScript 역사

Netscape / LiveScript (1995) -- JScript -- JavaScript Ecma(1997) -- EcmaScript(Ajax, 2005) -- ActionScript(2009) / EcmaScript v5(2009) --

ECMAScript6 (ES2015) 이후부터 모던 JavaScript라고 지칭하였다.  

JavaScript 3.0과 5.0 사이에 4.0은 iPhone출시와 Adobe Flash가 사장이 되면서 출시되지 못 하였다.

# 웹 앱의 필수 기본 구성요소

: HTML, CSS, JavaScript

HTML
: UI 구성

# Client Side Rendering과 Server Side Rendering의 차이

Client Side Rendering
: HTML을 주도적으로 만들어서 UI를 표현하는 방법

Server Side Rendering
: 서버에서 즉, 웹 서버 주도적으로 HTML을 만들어 브라우저에게 전송하는 방법

: 앱의 성격에 따라 선택하여야 한다. Client Side Rendering의 경우에는 canvas태그 등으로  2D, 3D 그래픽 툴을 이용할 수 있다.

# 추가 필수 웹 스펙

: 웹 워커, 웹 어셈블리

# 모던 JavaScript의 현재 부딪힌 문제점

# 첫번째 ① import, export와 script 태그의 차이

: import, export는 브라우저의 호환성이 지원되지 않으면 사용하지 못 할 수도 있다. JavaScript modules mdn 참고
다수의 script 태그로 JavaScript를 호출할 때 import, export로 module에서 간결하게 호출해 쓸 수 있고 script 태그간 충돌의 문제점을 줄일 수 있었다.

# 두번째 ② 최신 문법 사용함에 브라우저 호환성 문제

:  여전히 JavaScript의 최신문법이 브라우저에서 지원할 수 있는 기능이 제한되어 있다. 

Bundler
: 배포에 있어 다수의 .js를 불러들여 하나의 .js 파일로 만드는 도구. Webpack, 

Trans Fileler
: 기계어로 바꾸는 작업이 필요하듯 브라우저가 이해할 수 있는 언어는 JavaScript이므로 여러 언어에서 JavaScript로 변환하거나 최신문법에서 낮은 버전으로 변환하는 것이
Babel이라고 한다.

hbs ( handlebars )
: template 파일

#2.4~2.5 Typescript vs Javascript, nodejs & npm

# 현재 시장에서 TypeScript를 표준으로 도입하고 있는 추세이다.

